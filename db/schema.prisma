// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

// Enums are defined in src/constants/enums.ts for reusability

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")
  phone          String?
  address        String?

  tokens        Token[]
  sessions      Session[]
  professional  Professional?
  appointments  Appointment[]  @relation("CustomerAppointments")
  notifications Notification[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// New models for Appointment System

model Professional {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int           @unique
  serviceType    String // e.g., Doctor, Salon, Gym, Consultant
  specialization String?
  location       String?
  workingHours   Json // store as JSON (e.g., { start: "09:00", end: "18:00" })
  bio            String?
  rating         Float?        @default(0)
  totalReviews   Int           @default(0)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointments   Appointment[] @relation("ProfessionalAppointments")

  @@index([serviceType])
  @@index([location])
  @@index([isActive])
  @@index([rating])
  @@index([createdAt])
  @@index([serviceType, isActive])
  @@index([location, isActive])
}

model Appointment {
  id             Int          @id @default(autoincrement())
  customer       User         @relation("CustomerAppointments", fields: [customerId], references: [id], onDelete: Cascade)
  customerId     Int
  professional   Professional @relation("ProfessionalAppointments", fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId Int
  serviceType    String
  dateTime       DateTime
  duration       Int          @default(60) // duration in minutes
  status         String       @default("PENDING")
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  payment Payment?

  @@index([customerId])
  @@index([professionalId])
  @@index([status])
  @@index([dateTime])
  @@index([createdAt])
  @@index([customerId, status])
  @@index([professionalId, status])
  @@index([professionalId, dateTime])
  @@index([dateTime, status])
}

model Payment {
  id            Int         @id @default(autoincrement())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId Int         @unique
  amount        Float
  status        String      @default("PENDING")
  method        String
  transactionId String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([status])
  @@index([method])
  @@index([createdAt])
  @@index([transactionId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  type      String
  message   String
  status    String   @default("PENDING")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([userId, status])
}
